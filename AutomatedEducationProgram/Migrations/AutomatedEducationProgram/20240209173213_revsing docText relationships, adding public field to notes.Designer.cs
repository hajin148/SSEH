// <auto-generated />
using System;
using AutomatedEducationProgram.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutomatedEducationProgram.Migrations.AutomatedEducationProgram
{
    [DbContext(typeof(AutomatedEducationProgramContext))]
    [Migration("20240209173213_revsing docText relationships, adding public field to notes")]
    partial class revsingdocTextrelationshipsaddingpublicfieldtonotes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AEPUserAEPUser", b =>
                {
                    b.Property<string>("followeesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("followersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("followeesId", "followersId");

                    b.HasIndex("followersId");

                    b.ToTable("AEPUserAEPUser");
                });

            modelBuilder.Entity("AutomatedEducationProgram.Areas.Data.AEPUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SelfDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AEPUser", (string)null);
                });

            modelBuilder.Entity("AutomatedEducationProgram.Models.DocumentText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("parentNoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("parentNoteId");

                    b.ToTable("DocumentTexts");
                });

            modelBuilder.Entity("AutomatedEducationProgram.Models.ExamQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentNoteId")
                        .HasColumnType("int");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<int?>("RelevantDocId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentNoteId");

                    b.HasIndex("RelevantDocId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("AutomatedEducationProgram.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Note", (string)null);
                });

            modelBuilder.Entity("AutomatedEducationProgram.Models.VocabularyWord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentNoteId")
                        .HasColumnType("int");

                    b.Property<int?>("RelevantDocId")
                        .HasColumnType("int");

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ParentNoteId");

                    b.HasIndex("RelevantDocId");

                    b.ToTable("VocabularyWord", (string)null);
                });

            modelBuilder.Entity("AEPUserAEPUser", b =>
                {
                    b.HasOne("AutomatedEducationProgram.Areas.Data.AEPUser", null)
                        .WithMany()
                        .HasForeignKey("followeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutomatedEducationProgram.Areas.Data.AEPUser", null)
                        .WithMany()
                        .HasForeignKey("followersId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutomatedEducationProgram.Models.DocumentText", b =>
                {
                    b.HasOne("AutomatedEducationProgram.Models.Note", "parentNote")
                        .WithMany()
                        .HasForeignKey("parentNoteId");

                    b.Navigation("parentNote");
                });

            modelBuilder.Entity("AutomatedEducationProgram.Models.ExamQuestion", b =>
                {
                    b.HasOne("AutomatedEducationProgram.Models.Note", "ParentNote")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ParentNoteId");

                    b.HasOne("AutomatedEducationProgram.Models.DocumentText", "RelevantDoc")
                        .WithMany()
                        .HasForeignKey("RelevantDocId");

                    b.Navigation("ParentNote");

                    b.Navigation("RelevantDoc");
                });

            modelBuilder.Entity("AutomatedEducationProgram.Models.VocabularyWord", b =>
                {
                    b.HasOne("AutomatedEducationProgram.Models.Note", "ParentNote")
                        .WithMany("VocabularyWords")
                        .HasForeignKey("ParentNoteId");

                    b.HasOne("AutomatedEducationProgram.Models.DocumentText", "RelevantDoc")
                        .WithMany()
                        .HasForeignKey("RelevantDocId");

                    b.Navigation("ParentNote");

                    b.Navigation("RelevantDoc");
                });

            modelBuilder.Entity("AutomatedEducationProgram.Models.Note", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("VocabularyWords");
                });
#pragma warning restore 612, 618
        }
    }
}
