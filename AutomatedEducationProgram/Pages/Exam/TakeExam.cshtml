@page
@model AutomatedEducationProgram.Pages.Exam.TakeExamModel


<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        line-height: 1.6;
        color: #333;
    }

    span.bold-term {
        font-weight: bold;
        display: inline;
        margin: 0;
        padding: 0;
        white-space: nowrap;
    }

    #Short_answer input[type="text"] {
        width: 100%;
        padding: 10px;
        font-size: 1rem;
        margin: 5px 0;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
        box-sizing: border-box;
    }

    .centered-title {
        text-align: center;
    }

    .centered-content {
        text-align: center;
    }



    .right-text {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-right: 10px;
    }

    .left-aligned-button {
        flex-grow: 1;
        text-align: left;
    }

    .right-aligned-buttons {
        flex-grow: 1;
        text-align: right;
    }

    button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        margin: 5px;
        transition: background-color 0.2s;
    }

        button:hover {
            background-color: #0056b3;
        }

    .card {
        margin: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        border-radius: 15px;
        background-color: #fff;
        padding: 1rem;
        &__content

    {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        text-align: center;
        flex-grow: 0;
    }

    &__header {
        vertical-align: middle;
        word-break: break-word;
        text-align: center;
    }

    &__text {
        margin-bottom: auto;
        margin-bottom: 2rem;
    }

    }</style>

<div class="centered-content">
    <h4>Practice Exam - @Model.CurrentNote.Title</h4>
</div>

<div class="centered-content">
    <div class="centered-content">
        <button id="timerButton">Start (two minutes) Timer</button>
        <div id="progressBarContainer" style="width: 100%; background-color: #e0e0e0; border-radius: 10px; margin: 20px 0;">
            <div id="progressBar" style="height: 20px; width: 0%; background-color: #007bff; border-radius: 10px;"></div>
        </div>
    </div>
    <p id="currentIndexDisplay">Question @Model.currIndex of @Model.totalNumberQuestions</p>
</div>
<!-- Container for the two sections -->
<div style="display: flex; justify-content: space-between;">
    <div style="flex: 1; padding-left: 10px;">
        <div class="card" style="border: 1px solid gray; padding: 10px; min-height: 150px;">
            <p>@Html.Raw(@Model.doc.Text)</p>
        </div>
    </div>
    <div style="flex: 1; padding-right: 10px;">

        <div class="card" style="border: 1px solid gray; padding: 10px; min-height: 150px;">
            <h5 id="currentQuestionDisplay">@Model.Questions[Model.currIndex - 1].Question</h5>
            <form method="post" enctype="multipart/form-data">
                <br />
                <div id="Short_answer">
                    <input type="text" name="answer" />
                </div>
                <div id="TF_answer">
                    <label><input type="radio" name="answer" value="True"> True</label>
                    <br /><br />
                    <label><input type="radio" name="answer" value="False"> False</label>
                </div>
                <div id="MCQ_answer">
                    <label>
                        <input type="radio" name="answer" value="1">
                        <span id="currentAnswerDisplay1">@Model.GeneratedAnswersMCQ[Model.currIndex - 1]</span>
                    </label>
                    <br /><br />
                    <label>
                        <input type="radio" name="answer" value="2">
                        <span id="currentAnswerDisplay2">@Model.GeneratedAnswersMCQ[Model.currIndex]</span>
                    </label>
                    <br /><br />
                    <label>
                        <input type="radio" name="answer" value="3">
                        <span id="currentAnswerDisplay3">@Model.GeneratedAnswersMCQ[Model.currIndex + 1]</span>
                    </label>
                    <br /><br />
                    <label>
                        <input type="radio" name="answer" value="4">
                        <span id="currentAnswerDisplay4">@Model.GeneratedAnswersMCQ[Model.currIndex + 2]</span>
                    </label>
                </div>
            </form>

        </div>
        <div class="right-text">
            <div class="left-aligned-button">
                <button id="prevButton" style="@(Model.currIndex >= 2 ? "" : "display: none;")">Previous</button>
            </div>
            <div class="right-aligned-buttons">
                <button id="nextButton" type="submit">Next</button>
                <form method="post" action="~/Exam/ResultExam" enctype="multipart/form-data">
                    <input type="hidden" id="userAnswersInput" name="UserAnswers" value="" />
                    <input type="hidden" id="noteIdInput" name="noteIdString" value="" />
                    <input type="hidden" id="numberMCQCount" name="numberMCQString" value="" />
                    <input type="hidden" id="numberShortCount" name="numberShortString" value="" />
                    <input type="hidden" id="numberTFCount" name="numberTFString" value="" />
                    <button id="submitExam" type="submit">Submit</button>
                </form>
            </div>
        </div>

    </div>
</div>

<script>
    let currIndex = @Model.currIndex;
    const totalNumberQuestions = @Model.totalNumberQuestions;
    const numberMCQQuestions = @Model.GeneratedQuestionsMCQ.Count;
    const numberShortQuestions = @Model.GeneratedQuestionsShort.Count;
    const numberTFQuestions = @Model.GeneratedQuestionsTF.Count;
    var questionsArray = @Html.Raw(Json.Serialize(Model.Questions.Select(q => q.Question)));
    var currQ = questionsArray[currIndex - 1];
    var nextQ = questionsArray[currIndex];
    var answerArray = @Html.Raw(Json.Serialize(Model.GeneratedAnswersMCQ));
    var a1 = answerArray[(currIndex * 4) - 4];
    var a2 = answerArray[(currIndex * 4) - 3];
    var a3 = answerArray[(currIndex * 4) - 2];
    var a4 = answerArray[(currIndex * 4) - 1];
    let userAnswers = {};




    if (currIndex <= numberMCQQuestions) {
        document.getElementById('currentQuestionDisplay').innerText = '(Multiple Choice) ' + `${currQ}`;
        document.getElementById('currentAnswerDisplay1').innerText = `${a1}`;
        document.getElementById('currentAnswerDisplay2').innerText = `${a2}`;
        document.getElementById('currentAnswerDisplay3').innerText = `${a3}`;
        document.getElementById('currentAnswerDisplay4').innerText = `${a4}`;
    }

    else if (currIndex >= numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
        document.getElementById('currentQuestionDisplay').innerText = '(Short Answer) ' + `${currQ}`;
    }

    else {
        document.getElementById('currentQuestionDisplay').innerText = '(True or False) ' + `${currQ}`;
    }

    hideTF();
    hideShort();
    submitExam.style.display = 'none';

    document.getElementById('nextButton').addEventListener('click', function () {
        if (currIndex < totalNumberQuestions) {
            if (currIndex <= numberMCQQuestions) {
                saveCurrentMCQSelection();
            } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
                saveCurrentShortAnswerSelection();
            } else {
                saveCurrentTFSelection();
            }
            currIndex++;
            nextQType = questionsArray[currIndex - 1];
            nextQ = questionsArray[currIndex - 1];
            if (currIndex <= numberMCQQuestions) {
                a1 = answerArray[(currIndex * 4) - 4];
                a2 = answerArray[(currIndex * 4) - 3];
                a3 = answerArray[(currIndex * 4) - 2];
                a4 = answerArray[(currIndex * 4) - 1];

            }
            resetRadioButtons();
            if (currIndex <= numberMCQQuestions) {
                restorePreviousMCQSelection();
            } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
                restorePreviousShortAnswerSelection();
            } else {
                restorePreviousTFSelection();
            }
            updateIndexDisplay();
        }

        if (currIndex <= numberMCQQuestions) {
            hideShort();
            hideTF();
            showMCQ();
        }

        else if (currIndex >= numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
            hideMCQ();
            hideTF();
            showShort();
        }

        else {
            showTF()
            hideMCQ();
            hideShort();
        }
    });


    document.getElementById('prevButton').addEventListener('click', function () {
        if (currIndex > 1) {
            if (currIndex <= numberMCQQuestions) {
                saveCurrentMCQSelection();
            } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
                saveCurrentShortAnswerSelection();
            } else {
                saveCurrentTFSelection();
            }
            currIndex--;
            nextQType = questionsArray[currIndex - 1];
            nextQ = questionsArray[currIndex - 1];
            if (currIndex <= numberMCQQuestions) {
                restorePreviousMCQSelection();
            } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
                restorePreviousShortAnswerSelection();
            } else {
                restorePreviousTFSelection();
            }

            if (currIndex <= numberMCQQuestions) {
                a1 = answerArray[(currIndex * 4) - 4];
                a2 = answerArray[(currIndex * 4) - 3];
                a3 = answerArray[(currIndex * 4) - 2];
                a4 = answerArray[(currIndex * 4) - 1];

            }

            updateIndexDisplay();
        }

        if (currIndex <= numberMCQQuestions) {
            hideShort();
            hideTF();
            showMCQ();
        }

        else if (currIndex >= numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
            hideMCQ();
            hideTF();
            showShort();
        }

        else {
            showTF()
            hideMCQ();
            hideShort();
        }
    });

    document.getElementById('submitExam').addEventListener('click', function (event) {
        event.preventDefault();

        if (currIndex <= numberMCQQuestions) {
            saveCurrentMCQSelection();
        } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
            saveCurrentShortAnswerSelection();
        } else {
            saveCurrentTFSelection();
        }

        const userAnswersSerialized = JSON.stringify(userAnswers);
        document.getElementById('userAnswersInput').value = userAnswersSerialized;
        const noteIdSerialized = JSON.stringify(@Model.noteId);
        document.getElementById('noteIdInput').value = noteIdSerialized;
        const numberMCQ = JSON.stringify(@Model.GeneratedQuestionsMCQ.Count);
        const numberShort = JSON.stringify(@Model.GeneratedQuestionsShort.Count);
        const numberTF = JSON.stringify(@Model.GeneratedQuestionsTF.Count);
        document.getElementById('numberMCQCount').value = numberMCQ;
        document.getElementById('numberShortCount').value = numberShort;
        document.getElementById('numberTFCount').value = numberTF;

        event.target.closest("form").submit();
    });

    function resetRadioButtons() {
        const radios = document.getElementsByName('answer');
        for (let i = 0; i < radios.length; i++) {
            radios[i].checked = false;
        }
        const shortAnswerInput = document.querySelector('#Short_answer input[type="text"]');
        if (shortAnswerInput) {
            shortAnswerInput.value = '';
        }
    }

    function saveCurrentMCQSelection() {
        const radios = document.getElementsByName('answer');
        let answered = false;
        for (let i = 0; i < radios.length; i++) {
            if (radios[i].checked) {
                userAnswers[currIndex] = radios[i].value;
                answered = true;
                break;
            }
        }
        if (!answered) {
            userAnswers[currIndex] = "Not Answered";
        }
    }

    function saveCurrentShortAnswerSelection() {
        const shortAnswerInput = document.querySelector('#Short_answer input[type="text"]');
        if (shortAnswerInput && shortAnswerInput.value.trim() !== "") {
            userAnswers[currIndex] = shortAnswerInput.value.trim();
        }
        else {
            userAnswers[currIndex] = "Not Answered";
        }
    }

    function saveCurrentTFSelection() {
        saveCurrentMCQSelection();
    }

    function restorePreviousMCQSelection() {
        const selectedValue = userAnswers[currIndex];
        const radios = document.getElementsByName('answer');
        for (let i = 0; i < radios.length; i++) {
            if (radios[i].value === selectedValue) {
                radios[i].checked = true;
                break;
            }
        }
    }

    function restorePreviousShortAnswerSelection() {
        const selectedValue = userAnswers[currIndex];
        const shortAnswerInput = document.querySelector('#Short_answer input[type="text"]');

        if (shortAnswerInput != null) {
            shortAnswerInput.value = selectedValue ? selectedValue : '';
        }
    }

    function restorePreviousTFSelection() {
        restorePreviousMCQSelection();
    }



    function updateIndexDisplay() {
        document.getElementById('currentIndexDisplay').innerText = `Question ${currIndex} of ${totalNumberQuestions}`;

        if (currIndex <= numberMCQQuestions) {
            document.getElementById('currentQuestionDisplay').innerText = '(Multiple Choice) ' + `${nextQ}`;
            document.getElementById('currentAnswerDisplay1').innerText = `${a1}`;
            document.getElementById('currentAnswerDisplay2').innerText = `${a2}`;
            document.getElementById('currentAnswerDisplay3').innerText = `${a3}`;
            document.getElementById('currentAnswerDisplay4').innerText = `${a4}`;
        }

        else if (currIndex >= numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
            document.getElementById('currentQuestionDisplay').innerText = '(Short Answer) ' + `${nextQ}`;
        }

        else {
            document.getElementById('currentQuestionDisplay').innerText = '(True or False) ' + `${nextQ}`;
        }



        const prevButton = document.getElementById('prevButton');
        const nextButton = document.getElementById('nextButton');
        if (currIndex >= 2) {
            if (prevButton) prevButton.style.display = '';
        } else {
            if (prevButton) prevButton.style.display = 'none';
        }

        if (currIndex == totalNumberQuestions) {
            nextButton.style.display = 'none';
            submitExam.style.display = '';

        } else {
            nextButton.style.display = '';
            submitExam.style.display = 'none';
        }
    }

    function showMCQ() {
        document.getElementById('MCQ_answer').style.display = ''
    }

    function hideMCQ() {
        document.getElementById('MCQ_answer').style.display = 'none'
    }

    function showShort() {
        document.getElementById('Short_answer').style.display = ''
    }

    function hideShort() {
        document.getElementById('Short_answer').style.display = 'none'
    }

    function showTF() {
        document.getElementById('TF_answer').style.display = ''
    }

    function hideTF() {
        document.getElementById('TF_answer').style.display = 'none'
    }
    document.addEventListener('DOMContentLoaded', function () {
        const progressBar = document.getElementById('progressBar');
        let timeLimit = 120; // Time limit in seconds (e.g., 2 minutes)
        let timePassed = 0;
        let timerInterval = null;

        function startTimer(duration, onTick, onEnd) {
            clearInterval(timerInterval);
            let timeLeft = duration;
            timerInterval = setInterval(() => {
                timeLeft--;
                timePassed = duration - timeLeft;
                onTick(timeLeft);

                if (timeLeft === 0) {
                    clearInterval(timerInterval);
                    onEnd();
                }
            }, 1000);
        }

        function updateProgressBar() {
            const percentage = (timePassed / timeLimit) * 100;
            progressBar.style.width = `${percentage}%`;
        }

        document.getElementById('timerButton').addEventListener('click', function () {
            startTimer(timeLimit, (timeLeft) => {
                updateProgressBar();

            }, () => {
                alert('Time is up for this question!');

            });
        });

        document.getElementById('nextButton').addEventListener('click', function () {

            timePassed = 0;
            progressBar.style.width = '0%';
            startTimer(timeLimit, (timeLeft) => {
                updateProgressBar();

            }, () => {
                alert('Time is up for this question!');
            });
        });

        document.getElementById('prevButton').addEventListener('click', function () {

            timePassed = 0;
            progressBar.style.width = '0%';
            startTimer(timeLimit, (timeLeft) => {
                updateProgressBar();

            }, () => {
                alert('Time is up for this question!');
            });
        });

        document.getElementById('Short_answer').addEventListener('keypress', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault();
            }
        });

    });
</script>
