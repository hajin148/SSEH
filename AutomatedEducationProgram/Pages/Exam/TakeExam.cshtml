@page
@model AutomatedEducationProgram.Pages.Exam.TakeExamModel


<style>
    span.bold-term {
        font-weight: bold;
        display: inline;
        margin: 0;
        padding: 0;
        white-space: nowrap;
    }

    .centered-title {
        text-align: center;
    }

    .centered-content {
        text-align: center;
    }

    .right-text {
        text-align: right;
        padding-right: 10px; 
    }

    .card {
        margin: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        border-radius: 15px;
        background-color: #fff;
        padding: 1rem;
        &__content

    {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        text-align: center;
        flex-grow: 0;
    }

    &__header {
        vertical-align: middle;
        word-break: break-word;
        text-align: center;
    }

    &__text {
        margin-bottom: auto;
        margin-bottom: 2rem;
    }

} 
</style>

<div class="centered-content">
    <h4>Practice Exam - @Model.CurrentNote.Title</h4>
</div>
<!-- Container for the two sections -->
<div style="display: flex; justify-content: space-between;">
    <div style="flex: 1; padding-left: 10px;">
        <button>Timer</button>
        <div class="card" style="border: 1px solid gray; padding: 10px; min-height: 150px;">
            @Html.Raw(@Model.doc.Text)
        </div>
    </div>
    <div style="flex: 1; padding-right: 10px;">
        <div class="right-text">
            <p id="currentIndexDisplay">Question @Model.currIndex of @Model.totalNumberQuestions</p>
        </div>
        <div class="card" style="border: 1px solid gray; padding: 10px; min-height: 150px;">
            <h5 id="currentQuestionDisplay">@Model.Questions[Model.currIndex - 1].Question</h5>
            <form method="post" enctype="multipart/form-data">
                <br />
                <div id ="Short_answer">                
                    <input type="text" name="answer" />
                </div>
                <div id="TF_answer">
                    <label><input type="radio" name="answer" value="True"> True</label>
                    <br />
                    <label><input type="radio" name="answer" value="False"> False</label>
                </div>
                <div id="MCQ_answer">
                    <label><input type="radio" name="answer" value="Option1"><span id="currentAnswerDisplay1">@Model.GeneratedAnswersMCQ[Model.currIndex - 1]</span></label>
                    <br /><br />
                    <label><input type="radio" name="answer" value="Option2"><span id="currentAnswerDisplay2">@Model.GeneratedAnswersMCQ[Model.currIndex]</span></label>
                    <br /><br />
                    <label><input type="radio" name="answer" value="Option3"><span id="currentAnswerDisplay3">@Model.GeneratedAnswersMCQ[Model.currIndex + 1]</span></label>
                    <br /><br />
                    <label><input type="radio" name="answer" value="Option4"><span id="currentAnswerDisplay4">@Model.GeneratedAnswersMCQ[Model.currIndex + 2]</span></label>
                </div>
            </form>
            
        </div>
        <div class="right-text">
            <button id="prevButton" style="@(Model.currIndex >= 2 ? "" : "display: none;")">Previous</button>
            <button id="nextButton" type="submit" >Next</button>
            <form method="post" action="~/Exam/ResultExam" enctype="multipart/form-data">
                <input type="hidden" id="userAnswersInput" name="UserAnswers" value="" />
                <button id="submitExam" type="submit">Submit</button>
            </form>
        </div>

    </div>
</div>

<script>
    let currIndex = @Model.currIndex;
    const totalNumberQuestions = @Model.totalNumberQuestions;
    const numberMCQQuestions = @Model.GeneratedQuestionsMCQ.Count;
    const numberShortQuestions = @Model.GeneratedQuestionsShort.Count;
    const numberTFQuestions = @Model.GeneratedQuestionsTF.Count;
    var questionsArray = @Html.Raw(Json.Serialize(Model.Questions.Select(q => q.Question)));
    var currQ = questionsArray[currIndex - 1];
    var nextQ = questionsArray[currIndex];
    var answerArray = @Html.Raw(Json.Serialize(Model.GeneratedAnswersMCQ));
    var a1 = answerArray[(currIndex * 4) - 4];
    var a2 = answerArray[(currIndex * 4) - 3];
    var a3 = answerArray[(currIndex * 4) - 2];
    var a4 = answerArray[(currIndex * 4) - 1];
    let userAnswers = {};

    

    if (currIndex <= numberMCQQuestions) {
        document.getElementById('currentQuestionDisplay').innerText = '(Multiple Choice) ' + `${currQ}`;
        document.getElementById('currentAnswerDisplay1').innerText = `${a1}`;
        document.getElementById('currentAnswerDisplay2').innerText = `${a2}`;
        document.getElementById('currentAnswerDisplay3').innerText = `${a3}`;
        document.getElementById('currentAnswerDisplay4').innerText = `${a4}`;
    }

    else if (currIndex >= numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
        document.getElementById('currentQuestionDisplay').innerText = '(Short Answer) ' + `${currQ}`;
    }

    else {
        document.getElementById('currentQuestionDisplay').innerText = '(True or False) ' + `${currQ}`;
    }

    hideTF()
    hideShort()
    submitExam.style.display = 'none';
    

    document.getElementById('nextButton').addEventListener('click', function () {
        if (currIndex < totalNumberQuestions) {
            if (currIndex <= numberMCQQuestions) {
                saveCurrentMCQSelection();
            } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
                saveCurrentShortAnswerSelection();
            } else {
                saveCurrentTFSelection();
            }
            currIndex++;
            nextQType = questionsArray[currIndex - 1];
            nextQ = questionsArray[currIndex - 1];
            if (currIndex <= numberMCQQuestions) {
                a1 = answerArray[(currIndex * 4) - 4];
                a2 = answerArray[(currIndex * 4) - 3];
                a3 = answerArray[(currIndex * 4) - 2];
                a4 = answerArray[(currIndex * 4) - 1];
                
            }
            resetRadioButtons();
            if (currIndex <= numberMCQQuestions) {
                restorePreviousMCQSelection();
            } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
                restorePreviousShortAnswerSelection();
            } else {
                restorePreviousTFSelection();
            }
            updateIndexDisplay();
        }

        if (currIndex <= numberMCQQuestions) {
            hideShort();
            hideTF();
            showMCQ();
        }

        else if (currIndex >= numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
            hideMCQ();
            hideTF();
            showShort();
        }

        else {
            showTF()
            hideMCQ();
            hideShort();
        }
    });

    document.getElementById('prevButton').addEventListener('click', function () {
        if (currIndex > 1) {
            if (currIndex <= numberMCQQuestions) {
                saveCurrentMCQSelection();
            } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
                saveCurrentShortAnswerSelection();
            } else {
                saveCurrentTFSelection();
            }
            currIndex--;
            nextQType = questionsArray[currIndex - 1];
            nextQ = questionsArray[currIndex - 1];
            if (currIndex <= numberMCQQuestions) {
                restorePreviousMCQSelection();
            } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
                restorePreviousShortAnswerSelection();
            } else {
                restorePreviousTFSelection();
            }

            if (currIndex <= numberMCQQuestions) {
                a1 = answerArray[(currIndex * 4) - 4];
                a2 = answerArray[(currIndex * 4) - 3];
                a3 = answerArray[(currIndex * 4) - 2];
                a4 = answerArray[(currIndex * 4) - 1];
                
            }
            
            updateIndexDisplay();
        }

        if (currIndex <= numberMCQQuestions) {
            hideShort();
            hideTF();
            showMCQ();
        }

        else if (currIndex >= numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
            hideMCQ();
            hideTF();
            showShort();
        }

        else {
            showTF()
            hideMCQ();
            hideShort();
        }
    });

    document.getElementById('submitExam').addEventListener('click', function(event) {
        event.preventDefault(); 

        if (currIndex <= numberMCQQuestions) {
            saveCurrentMCQSelection();
        } else if (currIndex > numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
            saveCurrentShortAnswerSelection();
        } else {
            saveCurrentTFSelection();
        }

        const userAnswersSerialized = JSON.stringify(userAnswers);
        document.getElementById('userAnswersInput').value = userAnswersSerialized;


        event.target.closest("form").submit(); 
    });

    function resetRadioButtons() {
        const radios = document.getElementsByName('answer');
        for (let i = 0; i < radios.length; i++) {
            radios[i].checked = false;
        }
        const shortAnswerInput = document.querySelector('#Short_answer input[type="text"]');
        if (shortAnswerInput) {
            shortAnswerInput.value = '';
        }
    }

    function saveCurrentMCQSelection() {
        const radios = document.getElementsByName('answer');
        let answered = false;
        for (let i = 0; i < radios.length; i++) {
            if (radios[i].checked) {
                userAnswers[currIndex] = radios[i].value;
                answered = true;
                break;
            }
        }
        if (!answered) {
            userAnswers[currIndex] = "Not Answered"; 
        }
    }

    function saveCurrentShortAnswerSelection() {
        const shortAnswerInput = document.querySelector('#Short_answer input[type="text"]');
        if (shortAnswerInput && shortAnswerInput.value.trim() !== "") {
            userAnswers[currIndex] = shortAnswerInput.value.trim();
        }
        else {
                userAnswers[currIndex] = "Not Answered";
        }
    }

    function saveCurrentTFSelection() {
        saveCurrentMCQSelection(); 
    }

    function restorePreviousMCQSelection() {
        const selectedValue = userAnswers[currIndex];
        const radios = document.getElementsByName('answer');
        for (let i = 0; i < radios.length; i++) {
            if (radios[i].value === selectedValue) {
                radios[i].checked = true;
                break;
            }
        }
    }

    function restorePreviousShortAnswerSelection() {
        const selectedValue = userAnswers[currIndex];
        const shortAnswerInput = document.querySelector('#Short_answer input[type="text"]');

        if (shortAnswerInput != null) {
            shortAnswerInput.value = selectedValue ? selectedValue : '';
        }
    }

    function restorePreviousTFSelection() {
        restorePreviousMCQSelection(); 
    }



    function updateIndexDisplay() {
        document.getElementById('currentIndexDisplay').innerText = `Question ${currIndex} of ${totalNumberQuestions}`;

        if (currIndex <= numberMCQQuestions) {
            document.getElementById('currentQuestionDisplay').innerText = '(Multiple Choice) ' + `${nextQ}`;
            document.getElementById('currentAnswerDisplay1').innerText = `${a1}`;
            document.getElementById('currentAnswerDisplay2').innerText = `${a2}`;
            document.getElementById('currentAnswerDisplay3').innerText = `${a3}`;
            document.getElementById('currentAnswerDisplay4').innerText = `${a4}`;
        }

        else if (currIndex >= numberMCQQuestions && currIndex <= numberMCQQuestions + numberShortQuestions) {
            document.getElementById('currentQuestionDisplay').innerText = '(Short Answer) ' + `${nextQ}`;
        }

        else {
            document.getElementById('currentQuestionDisplay').innerText = '(True or False) ' + `${nextQ}`;
        }



        const prevButton = document.getElementById('prevButton');
        const nextButton = document.getElementById('nextButton');
        if (currIndex >= 2) {
            if (prevButton) prevButton.style.display = '';
        } else {
            if (prevButton) prevButton.style.display = 'none';
        }

        if (currIndex == totalNumberQuestions) {
            nextButton.style.display = 'none';
            submitExam.style.display = '';

        } else {
            nextButton.style.display = '';
            submitExam.style.display = 'none';
        }
    }

    function showMCQ() {
        document.getElementById('MCQ_answer').style.display = ''
    }

    function hideMCQ() {
        document.getElementById('MCQ_answer').style.display = 'none'
    }

    function showShort() {
        document.getElementById('Short_answer').style.display = ''
    }

    function hideShort() {
        document.getElementById('Short_answer').style.display = 'none'
    }

    function showTF() {
        document.getElementById('TF_answer').style.display = ''
    }

    function hideTF() {
        document.getElementById('TF_answer').style.display = 'none'
    }
</script>
