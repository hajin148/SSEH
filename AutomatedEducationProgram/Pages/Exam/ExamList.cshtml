@page
@model AutomatedEducationProgram.Pages.Exam.ExamListModel

<style>
    /* Define colors */
    :root {
        --primary-color: #3498db; /* Blue */
        --accent-color: #2ecc71; /* Green */
        --text-color: #333; /* Dark gray */
    }

    /* Updated styles */
    .centered-title {
        text-align: center;
        color: var(--primary-color); /* Use primary color for title */
    }

    .centered-content {
        text-align: center;
        color: var(--text-color); /* Use dark gray for content */
    }

    input[type="file"],
    input[type="number"] {
        border: 2px solid var(--accent-color); /* Use accent color for input borders */
        padding: 10px;
        border-radius: 5px;
    }

    button[type="submit"] {
        background-color: var(--accent-color); /* Use accent color for button background */
        color: #fff; /* White text color */
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button[type="submit"]:hover {
            background-color: #27ae60; /* Darken accent color on hover */
        }

    .card {
        margin: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        border-radius: 15px;
        background-color: #fff;
        padding: 1rem;
    }

    .card__content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        text-align: center;
        flex-grow: 0;
    }

    .card__header {
        vertical-align: middle;
        word-break: break-word;
        text-align: center;
    }

    .card__text {
        margin-bottom: auto;
        margin-bottom: 2rem;
    }

    /* Other existing styles */
    .vocabulary-table {
        width: 100%;
        table-layout: fixed;
    }

    .term-cell {
        white-space: nowrap;
        vertical-align: middle;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 0;
    }

    .definition-cell {
        vertical-align: middle;
        word-break: break-word;
    }

    span.bold-term {
        font-weight: bold;
        display: inline;
        margin: 0;
        padding: 0;
        white-space: nowrap;
    }
</style>

<!-- Spinner HTML -->
<div id="spinner" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
    <img src="~/images/spinner.gif" alt="Loading..." style="width: 50px; height: 50px;" />
</div>

@if (!(Model.GeneratedQuestionsMCQ.Any() || Model.GeneratedQuestionsShort.Any() || Model.GeneratedQuestionsTF.Any()))
{
    <h2 class="centered-title">Upload File</h2>
    <div class="centered-content" style="margin: 0 auto; max-width: 600px;">
        <p>
            This page allows you to upload a PDF file to generate exam questions based on the file given.
            Once uploaded, the file will be processed to create an exam and your passage will be shown along with them.
        </p>
    </div>
    <form method="post" enctype="multipart/form-data">
        <div class="centered-content">
            <input type="file" id="upload" name="upload" accept=".pdf,.txt" placeholder=".pdf or .txt" />
        </div>
        <p></p>
        <div class="centered-content">
            <span># of Multiple Choice: <input type="number" id="numMCQ" name="numMCQ" placeholder="# of MCQs" value="3" /></span>
        </div>
        <p></p>
        <div class="centered-content">
            <span># of Short Answer: <input type="number" id="numShortAnswer" name="numShortAnswer" placeholder="# of Short Questions" value="3" /></span>
        </div>
        <p></p>
        <div class="centered-content">
            <span># of True/False: <input type="number" id="numTrueFalse" name="numTrueFalse" placeholder="# of True & False" value="3" /></span>
        </div>
        <p></p>
        <div class="centered-content">
            <!-- Button with onclick event to trigger spinner -->
            <button type="submit" onclick="showSpinner()">Generate</button>
        </div>
    </form>
}

<!-- Container for the two sections -->
<div style="display: flex; justify-content: space-between;">
    <!-- Left Container for Questions -->
    @if (Model.GeneratedQuestionsMCQ.Any() || Model.GeneratedQuestionsShort.Any() || Model.GeneratedQuestionsTF.Any())
    {
        <div style="flex: 1; padding-right: 10px;">
            <h3 class="centered-title">Question List</h3>
            <div class="grid">
                @for (int i = 0; i < Model.GeneratedQuestionsMCQ.Count; i++)
                {
                    var qna = Model.GeneratedQuestionsMCQ[i];
                    <div class="card" contenteditable="true">
                        <div class="card__content">
                            <h5 class="card__header">(Multiple-Choice) @qna.Question</h5>
                            <p class="card__text">@qna.Answer</p>
                        </div>
                    </div>
                }

                @for (int i = 0; i < Model.GeneratedQuestionsShort.Count; i++)
                {
                    var qna = Model.GeneratedQuestionsShort[i];
                    <div class="card" contenteditable="true">
                        <div class="card__content">
                            <h5 class="card__header">(Short-Answer) @qna.Question</h5>
                            <p class="card__text">@qna.Answer</p>
                        </div>
                    </div>
                }

                @for (int i = 0; i < Model.GeneratedQuestionsTF.Count; i++)
                {
                    var qna = Model.GeneratedQuestionsTF[i];
                    <div class="card" contenteditable="true">
                        <div class="card__content">
                            <h5 class="card__header">(True or False) @qna.Question</h5>
                            <p class="card__text">@qna.Answer</p>
                        </div>
                    </div>
                }
            </div>
            <a asp-controller="Exam" asp-action="SaveExam" class="btn btn-primary" role="button">Save Exam</a>
        </div>
    }

    <!-- Right Container for Passage -->
    <div style="flex: 1; padding-left: 10px;">
        @if (Model.GeneratedQuestionsMCQ.Any() || Model.GeneratedQuestionsShort.Any() || Model.GeneratedQuestionsTF.Any())
        {
            <h3 style="text-align: center;">Passage</h3>
            <div class="card" contenteditable="true" style="border: 1px solid gray; padding: 10px; min-height: 150px;">
                @{
                    var splitText = Model.text.Split(new[] { "<br><br>" }, 2, StringSplitOptions.None);
                    var title = splitText[0];
                    var content = splitText.Length > 1 ? splitText[1] : string.Empty;
                }
                <h4 style="text-align: center;">@Html.Raw(title)</h4>
                <p>@Html.Raw(content)</p>
            </div>
        }
    </div>
</div>

<script>
    // Show spinner function
    function showSpinner() {
        document.getElementById('spinner').style.display = 'block';
    }
</script>
