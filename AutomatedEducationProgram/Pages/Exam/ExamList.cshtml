@page
@model AutomatedEducationProgram.Pages.Exam.ExamListModel

<style>
    /* Define colors */
    :root {
        --primary-color: #3498db; /* Blue */
        --accent-color: #2ecc71; /* Green */
        --text-color: #333; /* Dark gray */
    }

    .upload-container {
        padding: 0px 150px 0px 150px;
    }

    .text-container {
        text-align: left;
        justify-content: left;
        padding: 50px 0px 80px 0px;
    }

    /* Updated styles */
    .centered-title {
        font-weight: bold;
        font-size: 30px;
        padding-bottom: 20px;
    }

    .centered-desc {
        font-size: 18px;
    }

    .centered-content {
        border: 5px dotted #ABABAB; /* Use accent color for file input border */
        border-radius: 15px;
        padding: 50px 0px 50px 0px;
        align-items: center;
        justify-content: center;
        display: flex;
        flex-direction: column;
        color: var(--text-color); /* Use dark gray for content */
    }

    .upload-placeholder {
        font-size: 30px;
        color: darkgrey;
        padding-bottom: 30px;
    }

    .question-text {
        font-size: 27px;
        padding: 30px 0px 20px 0px;
        font-weight: bold;
    }

    .number-columns {
        display: flex;
        justify-content: space-between;
        
    }

    .number-text {
        border: 2px solid darkgrey; /* Use accent color for file input border */
        border-radius: 10px;
        display: flex;
        width: 30%;
        align-items: center;
        padding: 20px;
        font-size: 20px;
        justify-content: space-between;
    }

    .submit-btn {
        display: flex;
        margin: 40px 0px 80px 0px;
        justify-content: right;
    }


    input[type="number"] {
        border: none;
        text-align: right;
        width: 30%;
    }

    input[type="file"] {
        text-align: center;
    
    }

    button[type="submit"] {
        background-color: #5358FF; /* Use accent color for button background */
        color: #fff; /* White text color */
        padding: 20px;
        border: none;
        border-radius: 10px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        width: 30%;
        font-size: 27px;
    }

        button[type="submit"]:hover {
            background-color: #3135A7; /* Darken accent color on hover */
        }

    .card {
        margin: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        border-radius: 15px;
        background-color: #fff;
        padding: 1rem;
    }

    .card__content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        text-align: center;
        flex-grow: 0;
    }

    .card__header {
        vertical-align: middle;
        word-break: break-word;
        text-align: center;
    }

    .card__text {
        margin-bottom: auto;
        margin-bottom: 2rem;
    }

    /* Other existing styles */
    .vocabulary-table {
        width: 100%;
        table-layout: fixed;
    }

    .term-cell {
        white-space: nowrap;
        vertical-align: middle;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 0;
    }

    .definition-cell {
        vertical-align: middle;
        word-break: break-word;
    }

    span.bold-term {
        font-weight: bold;
        display: inline;
        margin: 0;
        padding: 0;
        white-space: nowrap;
    }

    .correct {
        color: green;
    }

    .incorrect {
        color: red;
    }

    .card {
        margin: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        border-radius: 15px;
        background-color: #fff;
        padding: 1rem;
    }

    &__content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        text-align: center;
        flex-grow: 0;
    }

    &__header {
        vertical-align: middle;
        word-break: break-word;
        text-align: center;
    }

    &__text {
        margin-bottom: auto;
        margin-bottom: 2rem;
    }

    }
</style>

<!-- Spinner HTML -->
<div id="spinner" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
    <img src="~/images/spinner.gif" alt="Loading..." style="width: 50px; height: 50px;" />
</div>

@if (!(Model.GeneratedQuestionsMCQ.Any() || Model.GeneratedQuestionsShort.Any() || Model.GeneratedQuestionsTF.Any()))
{
    <div class="upload-container">
    <div class="text-container">
        <div class="centered-title">Upload File</div>
        <div class="centered-desc">
            This page allows you to upload a PDF file to generate exam questions based on the file given.
            Once uploaded, the file will be processed to create an exam and your passage will be shown along with them.
            </div>
        </div>
    <form method="post" enctype="multipart/form-data">
        <div class="centered-content">
                <div class="upload-placeholder">Select the files to upload.</div>
                <input type="file" id="upload" name="upload" accept=".pdf,.txt" class="upload-btn" placeholder=".pdf or .txt" />
        </div>
        <div class="question-text">Questions to Generate</div>
        <div class="number-columns">
            <div class="number-text">
                <div>Multiple Choice</div> <input type="number" id="numMCQ" name="numMCQ" placeholder="# of MCQs" value="3" />
            </div>
                <div class="number-text">
                <div>Short Answer </div> <input type="number" id="numShortAnswer" name="numShortAnswer" placeholder="# of Short Questions" value="3" />
            </div>
            <div  class="number-text">
                <div>True or False </div><input type="number" id="numTrueFalse" name="numTrueFalse" placeholder="# of True & False" value="3" />
            </div>
         </div>
            <!-- Button with onclick event to trigger spinner -->
            <div class="submit-btn">
            <button type="submit" onclick="showSpinner()">Generate</button>
            </div>
    </form>
    </div>
}

<!-- Container for the two sections -->
<div style="display: flex; justify-content: space-between;">
    <!-- Left Container for Questions -->
    @if (Model.GeneratedQuestionsMCQ.Any() || Model.GeneratedQuestionsShort.Any() || Model.GeneratedQuestionsTF.Any())
    {
        <div style="flex: 1; padding-right: 10px;">
            <h3 class="centered-title">Question List</h3>
            <div class="grid">
                @for (int i = 0; i < Model.GeneratedQuestionsMCQ.Count; i++)
                {
                    var qna = Model.GeneratedQuestionsMCQ[i];
                    <div class="card" contenteditable="true">
                        <div class="card__content">
                            <h5 class="card__header">(Multiple-Choice) @qna.Question</h5>
                            <p class="card__text correct">a) @qna.AnswerA</p>
                            <p class="card__text incorrect">b) @qna.AnswerB</p>
                            <p class="card__text incorrect">c) @qna.AnswerC</p>
                            <p class="card__text incorrect">d) @qna.AnswerD</p>
                        </div>
                    </div>
                }

                @for (int i = 0; i < Model.GeneratedQuestionsShort.Count; i++)
                {
                    var qna = Model.GeneratedQuestionsShort[i];
                    <div class="card" contenteditable="true">
                        <div class="card__content">
                            <h5 class="card__header">(Short-Answer) @qna.Question</h5>
                            <p class="card__text correct">@qna.Answer</p>
                        </div>
                    </div>
                }

                @for (int i = 0; i < Model.GeneratedQuestionsTF.Count; i++)
                {
                    var qna = Model.GeneratedQuestionsTF[i];
                    <div class="card" contenteditable="true">
                        <div class="card__content">
                            <h5 class="card__header">(True or False) @qna.Question</h5>
                            <p class="card__text correct">@qna.Answer</p>
                        </div>
                    </div>
                }
            </div>
            <a asp-controller="Exam" asp-action="SaveExam" class="btn btn-primary" role="button">Save Exam</a>
            @Html.AntiForgeryToken()
            <a href="javascript:void(0)" onclick="resetQuestion()" class="btn btn-secondary">Create New File</a>
        </div>
    }

    <!-- Right Container for Passage -->
    <div style="flex: 1; padding-left: 10px;">
        @if (Model.GeneratedQuestionsMCQ.Any() || Model.GeneratedQuestionsShort.Any() || Model.GeneratedQuestionsTF.Any())
        {
            <h3 style="text-align: center;">Passage</h3>
            <div class="card" contenteditable="true" style="border: 1px solid gray; padding: 10px; min-height: 150px;">
                @{
                    var splitText = Model.text.Split(new[] { "<br><br>" }, 2, StringSplitOptions.None);
                    var title = splitText[0];
                    var content = splitText.Length > 1 ? splitText[1] : string.Empty;
                }
                <p style="text-align: center;">@Html.Raw(title)</p>
                <p>@Html.Raw(content)</p>
            </div>
        }
    </div>
</div>

<script>
    // Show spinner function
    function showSpinner() {
        document.getElementById('spinner').style.display = 'block';
    }

    function resetQuestion() {
        fetch('ExamList?handler=ResetQuestion', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value // Ensure CSRF token is included if required
            },
            body: JSON.stringify({})
        })
            .then(response => {
                if (response.ok) {
                    console.log('Reset successful');
                    location.reload();
                } else {
                    console.error('Reset failed');
                    alert("Failed to reset Exam.");
                }
            })
            .catch(error => console.error('Error resetting exam:', error));
    }
</script>
