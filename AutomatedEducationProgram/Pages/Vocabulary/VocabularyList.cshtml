@page
@using AutomatedEducationProgram.Areas.Data
@using AutomatedEducationProgram.Models;
@model AutomatedEducationProgram.Pages.Vocabulary.VocabularyList

<style>
    /* Define colors */
    :root {
        --primary-color: #3498db; /* Blue */
        --accent-color: #2ecc71; /* Green */
        --text-color: #333; /* Dark gray */
    }

    /* Updated styles */
    .centered-title {
        text-align: center;
        color: var(--primary-color); /* Use primary color for title */
    }

    .centered-content {
        text-align: center;
        color: var(--text-color); /* Use dark gray for content */
    }

    input[type="file"] {
        border: 2px solid var(--accent-color); /* Use accent color for file input border */
        padding: 10px;
        border-radius: 5px;
    }

    input[type="number"] {
        border: 2px solid var(--accent-color); /* Use accent color for number input border */
        padding: 10px;
        border-radius: 5px;
    }

    button[type="submit"] {
        background-color: var(--accent-color); /* Use accent color for button background */
        color: #fff; /* White text color */
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        button[type="submit"]:hover {
            background-color: #27ae60; /* Darken accent color on hover */
        }

    /* Other existing styles */
    .vocabulary-table {
        width: 100%;
        table-layout: fixed;
    }

    .term-cell {
        white-space: nowrap;
        vertical-align: middle;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 0;
    }

    .definition-cell {
        vertical-align: middle;
        word-break: break-word;
    }

    span.bold-term {
        font-weight: bold;
        display: inline;
        margin: 0;
        padding: 0;
        white-space: nowrap;
    }

    .card {
        margin: 1rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        border-radius: 15px;
        background-color: #fff;
        padding: 1rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        padding: 2rem;
        text-align: center;
        flex-grow: 0;
    }

    .card__header {
        vertical-align: middle;
        word-break: break-word;
        text-align: center;
    }

    .card__text {
        margin-bottom: auto;
        margin-bottom: 2rem;
    }
</style>

<div id="spinner" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%);">
    <img src="~/images/spinner.gif" alt="Loading..." style="width: 50px; height: 50px;" />
</div>



@if (!Model.ProcessedVocabulary.Any())
{
    <h2 class="centered-title">Upload File</h2>
    <div class="centered-content" style="margin: 0 auto; max-width: 600px;">
    <p>
        This page allows you to upload a PDF file to retrieve vocabulary terms and their definitions from the file given.
        Once uploaded, the file will be processed to generate a vocabulary list and your passage will be shown along with them.
    </p>
    </div>
    <form method="post" enctype="multipart/form-data">
        <div class="centered-content">
            <input type="file" id="upload" name="upload" accept=".pdf,.txt" />
        </div>
        <p></p>
        <div class="centered-content">
            <div class="centered-content">
                <label for="numQuestion">Number of terms to generate:</label>
                <input type="number" id="numQuestion" name="numQuestion" placeholder="# of Vocabs" min="1" value="5"/>
            </div>
        </div>
        <p></p>
        <div class="centered-content">
            <button type="submit">Generate</button>
        </div>
    </form>
}
<!-- Container for the two sections -->
<div style="display: flex; justify-content: space-between;">
    @if (Model.ProcessedVocabulary.Any())
    {
        <!-- Left Container for Vocabularies and Definitions -->
        <div style="flex: 1; padding-right: 10px;">
            <h3 class="centered-title">Vocabulary List</h3>
            <div class="grid">
                @foreach (var vocab in Model.ProcessedVocabulary)
                {
                    <div class="card">
                        <div class="card__content" contenteditable="false">
                            <h2 class="card__header">"@vocab.Term"</h2>
                            <p class="card__text">Definition: @vocab.Definition</p>
                        </div>
                        <!-- <button>Add <span>&rarr;</span></button> button to use later on -->
                    </div>
                }
            </div>
            <a asp-controller="Vocabulary" asp-action="SaveVocabulary" class="btn btn-primary" role="button">Save Note</a>
            @Html.AntiForgeryToken()
            <a href="javascript:void(0)" onclick="resetVocabulary()" class="btn btn-secondary">Create New File</a>

        </div>
    }

    <!-- Right Container for Passage -->
    <div style="flex: 1; padding-left: 10px;">
        @if (Model.ProcessedVocabulary.Any())
        {
            <h3 style="text-align: center;">Passage</h3>
            <div class="card" contenteditable="false" style="border: 1px solid gray; padding: 10px; min-height: 150px;">
                @{
                    var splitText = Model.text.Split(new[] { "<br><br>" }, 2, StringSplitOptions.None);
                    var title = splitText[0];
                    var content = splitText.Length > 1 ? splitText[1] : string.Empty;
                }

                <h4 style="text-align: center;">@Html.Raw(title)</h4>
                <p>@Html.Raw(content)</p>
            </div>
        }
    </div>

</div>

<script>
    function showSpinner() {
        document.getElementById('spinner').style.display = 'block';
    }

    function hideSpinner() {
        setTimeout(function () {
            document.getElementById('spinner').style.display = 'none';
        }, 5000); // Adjust the time (in milliseconds) as needed, e.g., 5000 for 5 seconds
    }

    document.addEventListener('DOMContentLoaded', function () {
        var form = document.querySelector('form');

        if (form) {
            form.addEventListener('submit', function () {
                showSpinner();
            });
        }
    });

    function resetVocabulary() {
        fetch('VocabularyList?handler=ResetVocabulary', {
            method: 'POST',
            headers: {
                'RequestVerificationToken': document.getElementsByName('__RequestVerificationToken')[0].value
            }
        })
            .then(response => {
                if (response.ok) {
                    location.reload(); 
                } else {
                    alert("Failed to reset vocabulary.");
                }
            });
    }
</script>